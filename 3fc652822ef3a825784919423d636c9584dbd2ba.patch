diff -rupN --no-dereference geos-3.8.0/src/index/chain/MonotoneChainBuilder.cpp geos-3.8.0-new/src/index/chain/MonotoneChainBuilder.cpp
--- geos-3.8.0/src/index/chain/MonotoneChainBuilder.cpp	2019-10-08 18:20:35.000000000 +0200
+++ geos-3.8.0-new/src/index/chain/MonotoneChainBuilder.cpp	2020-02-24 10:59:48.236555133 +0100
@@ -96,29 +96,28 @@ MonotoneChainBuilder::findChainEnd(const
     // (which is the starting quadrant)
     int chainQuad = Quadrant::quadrant(pts[safeStart],
                                        pts[safeStart + 1]);
-    std::size_t last = start + 1;
 
-    const Coordinate* prev = &pts[last-1]; // avoid repeated coordinate access by index (virtual call)
-    const Coordinate* curr = &pts[last];
+    const Coordinate* prev; // avoid repeated coordinate access by index (virtual call)
+    const Coordinate* curr = &pts[start];
+
+    for(size_t last = start + 1; last < npts; last++) {
+        prev = curr;
+        curr = &pts[last];
 
-    while(last < npts) {
         // skip zero-length segments, but include them in the chain
         if(!prev->equals2D(*curr)) {
             // compute quadrant for next possible segment in chain
             int quad = Quadrant::quadrant(*prev, *curr);
             if(quad != chainQuad) {
-                break;
+                return last - 1;
             }
         }
-        ++last;
-        prev = curr;
-        curr = &pts[last];
     }
 #if GEOS_DEBUG
     std::cerr << "MonotoneChainBuilder::findChainEnd() returning" << std::endl;
 #endif
 
-    return last - 1;
+    return npts - 1;
 }
 
 } // namespace geos.index.chain
